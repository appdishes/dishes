# ===============================
# = DATA SOURCE
# ===============================
# Set here configurations for the database connection
#spring.datasource.url=jdbc:postgresql://localhost:5432/dishes
#spring.datasource.username=dish
#spring.datasource.password=dish
spring.datasource.url=jdbc:postgresql://postgres://xrgftvmtzoqwox:0e53e3d3d373003af0a5c3661a45b041a13d9c93441b602339027c8b162d025e@ec2-54-243-61-194.compute-1.amazonaws.com:5432/d71eahl5m4lnqa
spring.datasource.username=xrgftvmtzoqwox
spring.datasource.password=0e53e3d3d373003af0a5c3661a45b041a13d9c93441b602339027c8b162d025e
spring.datasource.driver-class-name=org.postgresql.Driver
# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle=true
spring.datasource.validationQuery=SELECT 1
# ===============================
# = JPA / HIBERNATE
# ===============================
# Show or not log for each sql query
spring.jpa.show-sql=true
# Hibernate ddl auto (create, create-drop, update): with "create-drop" the database
# schema will be automatically created afresh for every start of application
spring.jpa.hibernate.ddl-auto=create-drop

# Naming strategy
spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyHbmImpl
spring.jpa.hibernate.naming.physical-strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy

# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

#to resolve issue with "Caused by: java.sql.SQLFeatureNotSupportedException: Method org.postgresql.jdbc42.Jdbc42Connection.createClob() is not yet implemented."
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

#
spring.jackson.serialization.indent_output: true

server.port = 8090